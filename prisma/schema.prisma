datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int

  @@map("session")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String?        @default("User")
  email          String?        @unique
  emailVerified  DateTime?
  image          String?        @default("https://avatars.dicebear.com/api/open-peeps/imggggg.svg")
  onboardingDone Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Account        Account[]
  Session        Session[]
  Organization   Organization[]

  @@map("users")
}

model Organization {
  id            Int  @id @default(autoincrement())
  userId        Int
  user          User @relation(fields: [userId], references: [id])
  walletBalance Int  @default(100)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AnalysisRecord AnalysisRecord[]
  Transaction    Transaction[]

  @@map("organization")
}

enum AnalysisStatus {
  QUEUED
  PROCESSING
  PROCESSED
}

model AnalysisRecord {
  id             Int            @id @default(autoincrement())
  imageUrl       String
  organizationId Int
  organization   Organization   @relation(fields: [organizationId], references: [id])
  results        Json?
  status         AnalysisStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("analysisrecord")
}

model Transaction {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  amount         Int
  initialBalance Int
  finalBalance   Int
  orderId        String
  transactionId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("transaction")
}
